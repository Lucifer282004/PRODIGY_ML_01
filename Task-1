import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

train_df = pd.read_csv('train.csv')
test_df = pd.read_csv('test.csv')
sample_submission = pd.read_csv('sample_submission.csv')

features = ['GrLivArea', 'BedroomAbvGr', 'FullBath']
target = 'SalePrice'

train_df = train_df[features + [target]].dropna()
test_df = test_df[features].dropna()

X = train_df[features]
y = train_df[target]

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
test_scaled = scaler.transform(test_df)

model = LinearRegression()
model.fit(X_train_scaled, y_train)


y_val_pred = model.predict(X_val_scaled)

# Calculating the mean squared error
mse = mean_squared_error(y_val, y_val_pred)
rmse = np.sqrt(mse)
print(f'Validation RMSE: {rmse}')

# Histogram of residuals
residuals = y_val - y_val_pred

plt.figure(figsize=(10, 5))
sns.histplot(residuals, kde=True)
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.title('Distribution of Residuals')
plt.show()


# Predictions vs Actual plot
plt.figure(figsize=(10, 5))
plt.scatter(y_val, y_val_pred)
plt.xlabel('Actual SalePrice')
plt.ylabel('Predicted SalePrice')
plt.title('Actual vs Predicted SalePrice')
plt.plot([min(y_val), max(y_val)], [min(y_val), max(y_val)], color='red')
plt.show()


test_predictions = model.predict(test_scaled)

# Final submission file
submission = pd.DataFrame({
    'Id': sample_submission['Id'],
    'SalePrice': test_predictions
})
submission.to_csv('submission.csv', index=False)
